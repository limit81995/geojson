import { Injectable } from '@nestjs/common';
import * as turf from "@turf/turf";
import {CommonService} from "./common/common.service";

@Injectable()
export class AppService {

  public static GEO_JSON:any ={"type":"FeatureCollection","name":"北城","features":[
      {"type":"Feature","properties":{"name":"","center":[113.770759,34.805184]},"geometry":{"type":"Polygon","coordinates":[[[113.693153,34.858415],[113.692272,34.835185],[113.705318,34.800141],[113.708124,34.778778],[113.710048,34.775041],[113.72664,34.761039],[113.726867,34.734613],[113.73848,34.734688],[113.747072,34.734915],[113.757122,34.73498],[113.774503,34.735498],[113.796141,34.735984],[113.806506,34.735951],[113.819394,34.736437],[113.826139,34.735919],[113.831417,34.735658],[113.836663,34.735586],[113.843494,34.734993],[113.845955,34.734975],[113.847229,34.740978],[113.844461,34.744094],[113.841655,34.747403],[113.81978,34.759505],[113.822278,34.767722],[113.831073,34.786606],[113.832574,34.793368],[113.83293,34.801549],[113.832045,34.812635],[113.832292,34.817819],[113.833691,34.819539],[113.83435,34.820585],[113.83482,34.821774],[113.835249,34.833489],[113.849052,34.86166],[113.849246,34.868801],[113.823393,34.875235],[113.812751,34.875755],[113.800607,34.87251],[113.798609,34.865508],[113.794883,34.859373],[113.779251,34.863611],[113.769916,34.86581],[113.778896,34.846204],[113.766615,34.861899],[113.746602,34.867575],[113.712728,34.869226],[113.712674,34.868245]]]}},
      {"type":"Feature","properties":{"name":"","center":[113.69562,34.770994]},"geometry":{"type":"Polygon","coordinates":[[[113.702017,34.808992],[113.664606,34.81005],[113.66628,34.795395],[113.666743,34.774549],[113.681981,34.774603],[113.681983,34.756483],[113.691434,34.755325],[113.700128,34.755283],[113.700145,34.757466],[113.704039,34.757452],[113.703915,34.751649],[113.704099,34.737866],[113.720507,34.737898],[113.720694,34.731937],[113.726147,34.732054],[113.725744,34.7379],[113.725984,34.747214],[113.726256,34.751247],[113.726633,34.761034],[113.710034,34.775038],[113.708118,34.778779],[113.705297,34.800144]]]}},
      {"type":"Feature","properties":{"name":"","center":[113.644663,34.784458]},"geometry":{"type":"Polygon","coordinates":[[[113.681981,34.774595],[113.666735,34.774544],[113.666242,34.795342],[113.664566,34.810245],[113.640241,34.811357],[113.630751,34.81357],[113.627405,34.813504],[113.615268,34.810985],[113.607346,34.807911],[113.63188,34.769831],[113.632382,34.769316],[113.634705,34.76264],[113.636021,34.761325],[113.636807,34.761006],[113.649955,34.75849],[113.650256,34.757822],[113.651206,34.757497],[113.654113,34.761951],[113.65696,34.763713],[113.658391,34.762172],[113.659979,34.760053],[113.660109,34.758407],[113.667379,34.756074],[113.670842,34.755346],[113.673661,34.757421],[113.67472,34.757],[113.678787,34.756451],[113.678936,34.756788],[113.681973,34.756488]]]}},
      {"type":"Feature","properties":{"name":"","center":[113.637709,34.881836]},"geometry":{"type":"Polygon","coordinates":[[[113.643403,34.920673],[113.502103,34.957614],[113.475382,34.907507],[113.474553,34.873721],[113.513173,34.865278],[113.570931,34.868497],[113.579179,34.861403],[113.605168,34.82292],[113.600841,34.817305],[113.598695,34.811948],[113.598555,34.806057],[113.600347,34.806157],[113.602348,34.806507],[113.604979,34.8071],[113.607198,34.807926],[113.61544,34.811126],[113.627405,34.813512],[113.630735,34.813598],[113.640252,34.81136],[113.701961,34.809027],[113.692262,34.835187],[113.693091,34.858459],[113.712655,34.868258],[113.712711,34.869243],[113.746612,34.8676],[113.766616,34.861926],[113.778784,34.846381],[113.769796,34.865997],[113.782366,34.862864],[113.79487,34.85939],[113.798548,34.865543],[113.80005,34.870712],[113.800579,34.872638],[113.800865,34.879319],[113.784702,34.892376],[113.770471,34.91046],[113.762108,34.914576],[113.745439,34.915975],[113.672256,34.906177],[113.658316,34.91395]]]}}
    ]}

  /**
   * 根据geojson获取整个区域块
   * 目前仅支持polygon的geojson
   * @param geojson
   */
  public static getPolygonChuckByGeojson(geojson:object): any{
    let polygon = [];
    let features = this.GEO_JSON["features"];
    for(let i in features){
      if(features[i].geometry.type == "Polygon"){
        for(let coord_i in features[i].geometry.coordinates){
          let coord_item = features[i].geometry.coordinates[coord_i];
          //有的geojson没有结尾，这个geojson分析库需要第一个点和最后一个点一致。 让图形闭环。
          coord_item.push(coord_item[0])
          polygon.push(coord_item)
        }
      }
    }
    console.log(polygon)
    return polygon;
  }

  /**
   * 根据GeoJson 获取点是否在多边形范围内
   * @param point 数组二维坐标
   * @param geo_json GeoJson 数据 （目前仅支持Ploygon）
   */
  public static getPointInPolygonByGeoJson(point:number[],geo_json:any): object{
    try {
      const gcoord = require("gcoord");
      let cnv_coord = gcoord.transform(point,gcoord.GCJ02,gcoord.WGS84);  //转换后的坐标
      let geo_json_point: any = turf.point(cnv_coord);  //转换为geojson的point格式
      let res:{
        name:string;
        exist:boolean;
        [propName:string]: any;
      };
      //当前GeoJson的name
      let geo_json_name:string = geo_json.name;
      //GeoJson里的feature
      let features:number[] = geo_json.features;
      for(let fe_i in features){
        let feature_item = geo_json.features[fe_i];
        res = {
          name:geo_json_name,
          //目前测试 gcoord库的booleanPointInPolygon方法只能使用单个polygon
          exist:turf.booleanPointInPolygon(geo_json_point,feature_item)
        }
        if(res.exist){
          return res;
        }
      }

      return res;
    }catch (e) {
      CommonService.error(e.toString());
    }
  }
}
